// basic generic location model
// with single bimolecular reaction: A + B -> D
// assumes a number of nested compartments

// locations

location C1	      : size = 1.00, type = compartment;
location C2 in C1 : size = 1.00, type = compartment;
location C3 in C2 : size = 1.00, type = compartment;
location C4 in C3 : size = 1.00, type = compartment;

// initial quantities
// vary these to see how A and B move around and D is produced

A_C1_init = 100;  //all A in C1 initially
A_C2_init = 0;
A_C3_init = 0;
A_C4_init = 0;

B_C1_init = 0;
B_C2_init = 0;
B_C3_init = 0;
B_C4_init = 100;  //all B in C2 initially

D_C1_init = 0;
D_C2_init = 0;
D_C3_init = 0;
D_C4_init = 0;

// parameters

scale = 0.1;

// set any of these to zero to prevent movement

r_inwA = 0.2;
r_outA = 0.2;
r_inwB = 0.2;
r_outB = 0.2;
r_inwD = 0.1;  
r_outD = 0.1;

// set this to zero to observe movement without reactions

r_ABtoD  = 1;

// rate equations

Ainw1to2  = [ A@C1 * r_inwA * scale ];
Ainw2to3  = [ A@C2 * r_inwA * scale ];
Ainw3to4  = [ A@C3 * r_inwA * scale ];

Aout2to1  = [ A@C2 * r_outA * scale ];
Aout3to2  = [ A@C3 * r_outA * scale ];
Aout4to3  = [ A@C4 * r_outA * scale ];

Binw1to2  = [ B@C1 * r_inwB * scale ];
Binw2to3  = [ B@C2 * r_inwB * scale ];
Binw3to4  = [ B@C3 * r_inwB * scale ];

Bout2to1  = [ B@C2 * r_outB * scale ];
Bout3to2  = [ B@C3 * r_outB * scale ];
Bout4to3  = [ B@C4 * r_outB * scale ];

Dinw1to2  = [ D@C1 * r_inwD * scale ];
Dinw2to3  = [ D@C2 * r_inwD * scale ];
Dinw3to4  = [ D@C3 * r_inwD * scale ];

Dout2to1  = [ D@C2 * r_outD * scale ];
Dout3to2  = [ D@C3 * r_outD * scale ];
Dout4to3  = [ D@C4 * r_outD * scale ];

ABtoDin1  = [ A@C1 * B@C1 * r_ABtoD * scale ];
ABtoDin2  = [ A@C2 * B@C2 * r_ABtoD * scale ];
ABtoDin3  = [ A@C3 * B@C3 * r_ABtoD * scale ];
ABtoDin4  = [ A@C4 * B@C4 * r_ABtoD * scale ];

// species

A = (Ainw1to2[C1->C2],1) (.) A
  + (Ainw2to3[C2->C3],1) (.) A
  + (Ainw3to4[C3->C4],1) (.) A
  + (Aout2to1[C2->C1],1) (.) A
  + (Aout3to2[C3->C2],1) (.) A
  + (Aout4to3[C4->C3],1) (.) A
  + (ABtoDin1,1) << A@C1
  + (ABtoDin2,1) << A@C2
  + (ABtoDin3,1) << A@C3
  + (ABtoDin4,1) << A@C4;
   
B = (Binw1to2[C1->C2],1) (.) B
  + (Binw2to3[C2->C3],1) (.) B
  + (Binw3to4[C3->C4],1) (.) B
  + (Bout2to1[C2->C1],1) (.) B
  + (Bout3to2[C3->C2],1) (.) B
  + (Bout4to3[C4->C3],1) (.) B
  + (ABtoDin1,1) << B@C1
  + (ABtoDin2,1) << B@C2
  + (ABtoDin3,1) << B@C3
  + (ABtoDin4,1) << B@C4;

D = (Dinw1to2[C1->C2],1) (.) D
  + (Dinw2to3[C2->C3],1) (.) D
  + (Dinw3to4[C3->C4],1) (.) D
  + (Dout2to1[C2->C1],1) (.) D
  + (Dout3to2[C3->C2],1) (.) D
  + (Dout4to3[C4->C3],1) (.) D
  + (ABtoDin1,1) >> D@C1
  + (ABtoDin2,1) >> D@C2
  + (ABtoDin3,1) >> D@C3
  + (ABtoDin4,1) >> D@C4;
    
// model

    A@C1[A_C1_init]
<*> A@C2[A_C2_init]
<*> A@C3[A_C3_init]
<*> A@C4[A_C4_init]
<*> B@C1[B_C1_init]
<*> B@C2[B_C2_init]
<*> B@C3[B_C3_init]
<*> B@C4[B_C4_init]
<*> D@C1[D_C1_init]
<*> D@C2[D_C2_init]
<*> D@C3[D_C3_init]
<*> D@C4[D_C4_init]

